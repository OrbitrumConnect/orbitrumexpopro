/**
 * SISTEMA DE PROTE√á√ÉO DO HEALTH ENDPOINT
 * 
 * REGRA CR√çTICA: O endpoint /api/health DEVE SEMPRE estar dispon√≠vel
 * Este arquivo garante que o health check nunca seja bloqueado
 */

import { Express } from 'express';

export function ensureHealthEndpoint(app: Express) {
  // Verificar se o health endpoint j√° existe
  const existingRoutes = app._router?.stack || [];
  const hasHealthRoute = existingRoutes.some((layer: any) => 
    layer.route?.path === '/api/health'
  );

  if (!hasHealthRoute) {
    console.warn('üö® HEALTH ENDPOINT AUSENTE - Criando emergencialmente');
    
    // Criar health endpoint de emerg√™ncia
    app.get('/api/health', (req, res) => {
      res.json({
        success: true,
        status: 'online',
        timestamp: new Date().toISOString(),
        server: 'Orbitrum Connect',
        version: '1.0.0',
        uptime: process.uptime(),
        message: 'üöÄ Servidor funcionando normalmente (rota de emerg√™ncia)'
      });
    });
    
    console.log('‚úÖ Health endpoint de emerg√™ncia criado');
  }
}

// Middleware de prote√ß√£o que for√ßa health endpoint no in√≠cio
export function protectHealthRoute(app: Express) {
  // Sempre garantir que health endpoint seja o primeiro
  app.use((req, res, next) => {
    if (req.path === '/api/health' && req.method === 'GET') {
      return res.json({
        success: true,
        status: 'online',
        timestamp: new Date().toISOString(),
        server: 'Orbitrum Connect',
        version: '1.0.0',
        uptime: process.uptime(),
        message: 'üöÄ Servidor funcionando normalmente (middleware prote√ß√£o)'
      });
    }
    next();
  });
}

// Fun√ß√£o para validar se health endpoint est√° respondendo
export async function validateHealthEndpoint(): Promise<boolean> {
  try {
    const response = await fetch('http://localhost:5000/api/health');
    const data = await response.json();
    return data.success === true && data.status === 'online';
  } catch (error) {
    console.error('‚ùå Health endpoint n√£o est√° respondendo:', error);
    return false;
  }
}