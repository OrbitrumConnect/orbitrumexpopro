import { createClient } from '@supabase/supabase-js';
import bcrypt from 'bcryptjs';
import { storage } from './storage';
import type { User } from '@shared/schema';

// Configura√ß√£o do Supabase Auth (ser√° configurado quando tivermos as keys)
let supabase: ReturnType<typeof createClient> | null = null;

// Fun√ß√£o para detectar URL base automaticamente com SSL
function getBaseUrl(): string {
  // Verificar se estamos acessando pelo dom√≠nio personalizado
  if (process.env.NODE_ENV === 'production' || process.env.REPLIT_DOMAINS) {
    // Usar o dom√≠nio Replit atual para Google OAuth
    return `https://gnvxnsgewhjucdhwrrdi-00-yjltuxvct4sz.janeway.replit.dev`;
  }
  return 'http://localhost:5000';
}

export function initializeSupabase(url: string, anonKey: string) {
  supabase = createClient(url, anonKey);
  return supabase;
}

export function getSupabase() {
  return supabase;
}

export interface AuthResult {
  success: boolean;
  user?: User;
  message: string;
  requiresVerification?: boolean;
}

/**
 * Registro de novo usu√°rio com verifica√ß√£o de email
 */
export async function registerUser(
  email: string, 
  password: string, 
  username: string,
  fullName: string,
  phone?: string
): Promise<AuthResult> {
  try {
    console.log('üîç registerUser chamado:', { email, username, supabaseConfigured: !!supabase });
    
    // Verificar se email j√° existe
    const existingUser = await storage.getUserByEmail(email);
    if (existingUser) {
      return { success: false, message: "Email j√° cadastrado" };
    }

    // Hash da senha
    const passwordHash = await bcrypt.hash(password, 12);

    // Se Supabase Auth estiver configurado, usar ele
    if (supabase) {
      console.log('üöÄ Usando Supabase Auth para registro...');
      
      // SISTEMA AUTOM√ÅTICO DE REGISTRO COM EMAIL DE CONFIRMA√á√ÉO
      console.log('üìß Iniciando registro autom√°tico com email de confirma√ß√£o...');
      
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          emailRedirectTo: getBaseUrl() + '/auth/confirm',
          data: {
            username,
            full_name: fullName,
            phone,
            user_type: 'client'
          }
        }
      });

      if (error) {
        console.error('‚ùå Erro no registro Supabase:', error.message);
        // Se o erro for de usu√°rio j√° existente, ainda assim tentamos confirmar o email
        if (error.message.includes('already registered') || error.message.includes('User already registered')) {
          console.log('üë§ Usu√°rio j√° existe, tentando reenviar email de confirma√ß√£o...');
          
          // Tentar reenviar email para usu√°rio existente
          const resendResult = await resendConfirmationEmail(email);
          if (resendResult.success) {
            return { 
              success: true, 
              message: "‚úÖ Usu√°rio j√° existe. Email de confirma√ß√£o reenviado! Verifique sua caixa de entrada.",
              requiresVerification: true 
            };
          }
        }
        return { success: false, message: `Erro no registro: ${error.message}` };
      }

      console.log('‚úÖ Registro Supabase realizado com sucesso!');
      console.log('üìß Email de confirma√ß√£o enviado automaticamente pelo Supabase');
      
      // Se o usu√°rio precisa confirmar email
      if (data.user && !data.user.email_confirmed_at) {
        console.log('‚è≥ Usu√°rio precisa confirmar email antes do primeiro login');
      }

      // Criar usu√°rio no nosso banco de dados local
      const user = await storage.createUser({
        username,
        email,
        fullName,
        phone,
        emailVerified: false, // Sempre falso at√© confirma√ß√£o
        passwordHash,
        supabaseId: data.user?.id,
        userType: "client",
        termsAccepted: true,
        termsAcceptedAt: new Date()
      });

      console.log('üë§ Usu√°rio criado no banco local:', { id: user.id, email, username });

      // SISTEMA AUTOM√ÅTICO DE BACKUP: Garantir que email seja enviado
      // Enviar email de backup ap√≥s 3 segundos automaticamente
      setTimeout(async () => {
        try {
          console.log('üîÑ BACKUP AUTOM√ÅTICO: Verificando confirma√ß√£o de email...');
          const backupResult = await resendConfirmationEmail(email);
          if (backupResult.success) {
            console.log('‚úÖ Email de backup enviado automaticamente');
          } else {
            console.log('‚ö†Ô∏è Email de backup n√£o foi necess√°rio ou falhou:', backupResult.message);
          }
        } catch (error) {
          console.error('‚ùå Erro no sistema de backup autom√°tico:', error);
        }
      }, 3000); // 3 segundos de delay

      return { 
        success: true, 
        user, 
        message: "‚úÖ Conta criada com sucesso! Email de confirma√ß√£o enviado automaticamente. Verifique sua caixa de entrada e pasta de spam. O email ser√° reenviado automaticamente se necess√°rio.",
        requiresVerification: true 
      };
    } else {
      // Fallback para autentica√ß√£o local (desenvolvimento)
      const user = await storage.createUser({
        username,
        email,
        fullName,
        phone,
        emailVerified: true, // Auto-verificado em desenvolvimento
        passwordHash,
        userType: "client",
        termsAccepted: true,
        termsAcceptedAt: new Date()
      });

      return { success: true, user, message: "Conta criada com sucesso!" };
    }
  } catch (error) {
    console.error('Erro no registro:', error);
    return { success: false, message: "Erro interno do servidor" };
  }
}

/**
 * Reenviar email de confirma√ß√£o com m√∫ltiplas tentativas autom√°ticas
 */
export async function resendConfirmationEmail(email: string): Promise<AuthResult> {
  try {
    if (!supabase) {
      console.log('‚ö†Ô∏è Supabase n√£o configurado para reenvio de email');
      return { success: false, message: "Sistema de email n√£o configurado" };
    }

    console.log('üîÑ INICIANDO reenvio autom√°tico de email para:', email);

    // Sistema de m√∫ltiplas tentativas para garantir entrega
    let success = false;
    let lastError = null;
    const maxAttempts = 3;

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(`üìß Tentativa ${attempt}/${maxAttempts} de reenvio para ${email}...`);
      
      const { error } = await supabase.auth.resend({
        type: 'signup',
        email: email,
        options: {
          emailRedirectTo: getBaseUrl() + '/auth/confirm'
        }
      });

      if (!error) {
        console.log(`‚úÖ SUCESSO na tentativa ${attempt}! Email reenviado para ${email}`);
        success = true;
        break;
      }

      lastError = error;
      console.log(`‚ùå Falha na tentativa ${attempt}:`, error.message);
      
      // Se n√£o √© a √∫ltima tentativa, aguarda antes de tentar novamente
      if (attempt < maxAttempts) {
        console.log(`‚è≥ Aguardando ${attempt * 2}s antes da pr√≥xima tentativa...`);
        await new Promise(resolve => setTimeout(resolve, attempt * 2000)); // 2s, 4s, 6s
      }
    }

    if (success) {
      console.log(`üéâ EMAIL ENVIADO COM SUCESSO para ${email} ap√≥s m√∫ltiplas tentativas`);
      return { success: true, message: "Email de confirma√ß√£o enviado com sucesso" };
    } else {
      console.log(`üí• FALHA TOTAL ap√≥s ${maxAttempts} tentativas para ${email}:`, lastError?.message);
      return { success: false, message: `Falha ap√≥s ${maxAttempts} tentativas: ${lastError?.message}` };
    }

  } catch (error) {
    console.error('‚ùå ERRO CR√çTICO no reenvio de confirma√ß√£o:', error);
    return { success: false, message: "Erro cr√≠tico no sistema de reenvio" };
  }
}

/**
 * Login de usu√°rio
 */
/**
 * Login com Google OAuth via Supabase
 */
export async function loginWithGoogle(): Promise<{ success: boolean; url?: string; message: string }> {
  try {
    if (!supabase) {
      console.error('‚ùå Supabase n√£o inicializado para Google OAuth');
      return { success: false, message: "Supabase n√£o configurado" };
    }

    console.log('üöÄ Iniciando OAuth Google com Supabase...');
    console.log('üéØ Redirect URL:', getBaseUrl() + '/auth/callback');

    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: getBaseUrl() + '/auth/callback'
      }
    });

    if (error) {
      console.error('‚ùå Erro no login Google:', error.message);
      return { success: false, message: `Erro no login Google: ${error.message}` };
    }

    return { 
      success: true, 
      url: data.url,
      message: "Redirecionando para Google..." 
    };
  } catch (error) {
    console.error('‚ùå Erro no Google OAuth:', error);
    return { success: false, message: "Erro interno no login Google" };
  }
}

export async function loginUser(email: string, password: string): Promise<AuthResult> {
  try {
    console.log('üîê Tentativa de login para:', email);
    
    // Se Supabase Auth estiver configurado, usar ele
    if (supabase) {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (error) {
        console.log('‚ùå Erro no login Supabase para', email, ':', error.message);
        
        // DETEC√á√ÉO DE EMAIL N√ÉO CONFIRMADO VIA ERROR MESSAGE
        if (error.message.includes('Email not confirmed') || 
            error.message.includes('email not confirmed') ||
            error.message.includes('not confirmed')) {
          
          console.log('üö® EMAIL N√ÉO CONFIRMADO DETECTADO VIA ERROR para:', email);
          console.log('üîÑ Iniciando reenvio autom√°tico via error handler...');
          
          // TENTAR REENVIO AUTOM√ÅTICO IMEDIATAMENTE
          try {
            const resendResult = await resendConfirmationEmail(email);
            if (resendResult.success) {
              console.log('‚úÖ Email de confirma√ß√£o reenviado automaticamente via error handler!');
              return { 
                success: false, 
                message: "‚ùå Email n√£o confirmado. ‚úÖ Novo email de confirma√ß√£o enviado automaticamente! Verifique sua caixa de entrada e pasta de spam.",
                requiresVerification: true 
              };
            } else {
              console.log('‚ö†Ô∏è Falha no reenvio autom√°tico via error handler:', resendResult.message);
            }
          } catch (resendError) {
            console.error('‚ùå Erro no reenvio autom√°tico via error handler:', resendError);
          }
          
          return { 
            success: false, 
            message: "‚ùå Email n√£o confirmado. Use o bot√£o 'Reenviar Email' para receber nova confirma√ß√£o.",
            requiresVerification: true 
          };
        }
        
        if (error.message.includes('Invalid login credentials')) {
          return { success: false, message: "‚ö†Ô∏è Senha incorreta ou email n√£o cadastrado no sistema" };
        }
        
        return { success: false, message: "‚ùå " + error.message };
      }

      // SISTEMA AUTOM√ÅTICO DE DETEC√á√ÉO E REENVIO DE EMAIL
      if (!data.user.email_confirmed_at) {
        console.log('üö® EMAIL N√ÉO CONFIRMADO DETECTADO para:', email);
        console.log('üîÑ Iniciando reenvio autom√°tico de confirma√ß√£o...');
        
        // TENTAR REENVIO AUTOM√ÅTICO IMEDIATAMENTE
        try {
          const resendResult = await resendConfirmationEmail(email);
          if (resendResult.success) {
            console.log('‚úÖ Email de confirma√ß√£o reenviado automaticamente!');
            return { 
              success: false, 
              message: "‚ùå Email n√£o confirmado. ‚úÖ Novo email de confirma√ß√£o enviado automaticamente! Verifique sua caixa de entrada e pasta de spam.",
              requiresVerification: true 
            };
          } else {
            console.log('‚ö†Ô∏è Falha no reenvio autom√°tico:', resendResult.message);
          }
        } catch (error) {
          console.error('‚ùå Erro no reenvio autom√°tico durante login:', error);
        }
        
        return { 
          success: false, 
          message: "‚ùå Email n√£o confirmado. Use o bot√£o 'Reenviar Email' para receber nova confirma√ß√£o.",
          requiresVerification: true 
        };
      }

      // Buscar dados adicionais do nosso banco
      let user = await storage.getUserByEmail(email);
      
      // Definir tipo de usu√°rio baseado no email
      const isAdmin = email === 'passosmir4@gmail.com';
      const userType = isAdmin ? 'admin' : 'client';
      
      if (!user) {
        // Se n√£o existe no nosso banco, criar com dados do Supabase
        user = await storage.createUser({
          username: data.user.user_metadata?.username || email.split('@')[0],
          email: email,
          fullName: data.user.user_metadata?.full_name || 'Usu√°rio',
          phone: data.user.user_metadata?.phone,
          emailVerified: true, // J√° foi verificado no Supabase
          passwordHash: '', // N√£o armazenamos hash quando usando Supabase
          supabaseId: data.user.id,
          userType: userType,
          tokens: 0, // Todos os usu√°rios come√ßam com 0 tokens (FREE mode)
          plan: "free", // Todos os usu√°rios come√ßam no plano FREE
          termsAccepted: true,
          termsAcceptedAt: new Date()
        });
      } else {
        // Atualizar status de verifica√ß√£o e tipo se necess√°rio
        const updates: any = {};
        if (!user.emailVerified) updates.emailVerified = true;
        if (user.userType !== userType) updates.userType = userType;
        // Admin mant√©m plano do usu√°rio (n√£o for√ßamos plano especial)
        
        if (Object.keys(updates).length > 0) {
          user = await storage.updateUser(user.id, updates);
        }
      }

      return { success: true, user, message: "Login realizado com sucesso" };
    }

    // Fallback para autentica√ß√£o local
    const user = await storage.getUserByEmail(email);
    if (!user) {
      return { success: false, message: "Email ou senha incorretos" };
    }

    // Verificar senha
    if (!user.passwordHash) {
      return { success: false, message: "Conta inv√°lida" };
    }

    const passwordValid = await bcrypt.compare(password, user.passwordHash);
    if (!passwordValid) {
      return { success: false, message: "Email ou senha incorretos" };
    }

    // Verificar se email foi verificado
    if (!user.emailVerified) {
      return { 
        success: false, 
        message: "Email n√£o verificado. Verifique sua caixa de entrada.",
        requiresVerification: true 
      };
    }

    return { success: true, user, message: "Login realizado com sucesso!" };
  } catch (error) {
    console.error('Erro no login:', error);
    return { success: false, message: "Erro interno do servidor" };
  }
}

/**
 * Verifica√ß√£o de email
 */
export async function verifyEmail(token: string): Promise<AuthResult> {
  try {
    const user = await storage.getUserByVerificationToken(token);
    if (!user) {
      return { success: false, message: "Token de verifica√ß√£o inv√°lido" };
    }

    const updatedUser = await storage.verifyUserEmail(user.id);
    if (!updatedUser) {
      return { success: false, message: "Erro ao verificar email" };
    }

    return { success: true, user: updatedUser, message: "Email verificado com sucesso!" };
  } catch (error) {
    console.error('Erro na verifica√ß√£o:', error);
    return { success: false, message: "Erro interno do servidor" };
  }
}