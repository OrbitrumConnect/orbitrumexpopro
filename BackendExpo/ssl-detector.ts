/**
 * üîí SSL Detector - Orbitrum Connect
 * Detecta automaticamente se SSL est√° dispon√≠vel
 */

export class SSLDetector {
  private static sslAvailable: boolean | null = null;
  
  /**
   * Testa se SSL est√° funcionando no dom√≠nio
   */
  static async checkSSL(domain: string): Promise<boolean> {
    try {
      // Tentar fazer uma requisi√ß√£o HTTPS
      const response = await fetch(`https://${domain}`, {
        method: 'HEAD',
        signal: AbortSignal.timeout(5000) // 5s timeout
      });
      
      this.sslAvailable = response.ok;
      console.log(`üîí SSL Check: https://${domain} ‚Üí ${this.sslAvailable ? 'OK' : 'FAILED'}`);
      return this.sslAvailable;
    } catch (error) {
      this.sslAvailable = false;
      console.log(`‚ö†Ô∏è SSL n√£o dispon√≠vel para ${domain}, usando HTTP`);
      return false;
    }
  }
  
  /**
   * Retorna o protocolo correto baseado na detec√ß√£o SSL
   */
  static getProtocol(domain: string): string {
    // Para desenvolvimento, sempre HTTP
    if (domain.includes('localhost') || domain.includes('127.0.0.1')) {
      return 'http';
    }
    
    // Para produ√ß√£o, usar HTTPS se dispon√≠vel
    return this.sslAvailable ? 'https' : 'http';
  }
  
  /**
   * Retorna URL completa com protocolo correto
   */
  static getSecureUrl(domain: string): string {
    const protocol = this.getProtocol(domain);
    return `${protocol}://${domain}`;
  }
  
  /**
   * For√ßa verifica√ß√£o SSL na inicializa√ß√£o
   */
  static async initialize(domain: string): Promise<void> {
    if (domain.includes('localhost')) {
      this.sslAvailable = false;
      return;
    }
    
    console.log('üîç Verificando disponibilidade SSL...');
    await this.checkSSL(domain);
    
    if (this.sslAvailable) {
      console.log('‚úÖ SSL dispon√≠vel - usando HTTPS');
      process.env.SSL_ENABLED = 'true';
    } else {
      console.log('‚ö†Ô∏è SSL n√£o dispon√≠vel - usando HTTP temporariamente');
      process.env.SSL_ENABLED = 'false';
    }
  }
}